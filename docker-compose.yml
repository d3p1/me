##
# @description System services
# @author      Cristian Marcelo de Picciotto <d3p1@d3p1.dev>
# @note        This is a base Compose file that will be extended 
#              by other files related to the environment 
#              (i.e., we have a Compose file for the dev and prod environments)
##
services:
  ##
  # @note Add app service
  # @note It is possible to have the `app` and the `server` services 
  #       as an only one service if we add the server stack to the app image.
  #       I prefer to work them as a separate services because I think that, 
  #       in this way, each service responsability is well defined.
  #       However, it is completely valid to think that this app service 
  #       is just a container that builds the blog image, 
  #       so you would prefer to merge this service with the server service
  ##
  app:
    build: 
      ./app

  ##
  # @note Add server service
  # @note This service depends on (`depends_on`) the app/site builded code
  # @note Define a router to be able to access the container using HTTP, 
  #       and an other router to be able to access the container using HTTPS
  # @note For some reason, if the environment variables are not declared 
  #       inside `environment`, they are not expanded in 
  #       `<project_root_dir>/conf/server/templates/app.conf.template`.
  #       Also, if we declare the environment variables inside `environment`, 
  #       they are not expanded in `labels` declaration.
  #       That is why we used an `environment` section that gets environment
  #       variables from the `<project_root_dir>/.env` file
  # @link https://hub.docker.com/_/nginx
  ##    
  server:
    image: 
      nginx:stable-alpine3.17
    volumes:
      - ./conf/server/templates:/etc/nginx/templates
    depends_on: 
      - app  
    labels:
      - traefik.http.routers.http-blog.entrypoints=web
      - traefik.http.routers.http-blog.rule=Host(`${HOST}`) || Host(`www.${HOST}`)
      - traefik.http.routers.http-blog.service=http-blog
      - traefik.http.services.http-blog.loadbalancer.server.port=80
      - traefik.http.routers.https-blog.entrypoints=websecure
      - traefik.http.routers.https-blog.tls=true
      - traefik.http.routers.https-blog.rule=Host(`${HOST}`) || Host(`www.${HOST}`)
      - traefik.http.routers.https-blog.service=https-blog
      - traefik.http.services.https-blog.loadbalancer.server.port=80
    environment:
      - HOST=${HOST}
      - DOCUMENT_ROOT=${DOCUMENT_ROOT}
    restart: 
      always
  
  ##
  # @note Add reverse proxy service
  # @link https://github.com/traefik/traefik
  ##
  reverse_proxy:
    image: 
      traefik:v2.10
    volumes:
      - ${DOCKER_SOCKET_PATH}:/var/run/docker.sock
      - ./conf/reverse-proxy:/etc/traefik
    ports:
      - 80:80
      - 443:443
    environment:
      - TRAEFIK_ENTRYPOINTS_WEB_ADDRESS=:80 
      - TRAEFIK_ENTRYPOINTS_WEBSECURE_ADDRESS=:443
      - TRAEFIK_PROVIDERS_DOCKER=true
      - TRAEFIK_PROVIDERS_FILE_DIRECTORY=/etc/traefik/file-provider
    restart:
      always